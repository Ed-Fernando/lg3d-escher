-*- outline -*-

* 0.2.2.lg
    - paulby fixed a bug with environment handling. I don't have the details	
      on that.
    - Display.java 
      Connection.java
      DinReader.java
      XProtocolInfo.java
      Rewrote the Escher event and error handling. There is now a DinReader 
      thread which reads all events, errors, and replies and farms them out
      to the Escher client threads. This has proved to be more robust. Also,
      a new feature, display.ignore_error() has been added in order to globally
      ignore certain troublesome errors throughout the PLG Display Server.

* 0.2.2
   - dual licenses: GPL and BSD

* 0.2.1
** link to specification
   - link to http://escher.sourceforge.net/etc/specification/
   - renamed and re-organized filenames in ps.gz format
** gnu.x11.extension.Print
   - X Print Service Extension
   - test: gnu.x11.test.PrintHello
   - use 'cat > /tmp/lp-output' as /usr/bin/lp to capture printer
     output as Postscript file 
** NEWS vs. CHANGES
   - standard filename for user-visible changes

* 0.2.0
** name directory and filename of screenshots as java classname
   - better classification
   - automatation of screenshots
** gnu.util.Environment
   - avoid partial matching such as matching
     `HOSTDISPLAY=canning-home:0.0' instead of `DISPLAY=:0.0', by
     using "\n" + name + "=" as search key
** name changes
   - gnu.x11.CoreError --> gnu.x11.Error
   - gnu.x11.extension.glx --> gnu.glx
** use caches
   - gnu.x11.extension.render.Picture.Format
   - gnu.x11.extension.glx.VisualConfig
   - internal caches are cheaper than round-trip requests
** use mask, for template in gnu.x11.extension.render.Picture.Format
   - complete and consistent specification of template and configuration
** gnu.util.Vector4d, gnu.util.Matrix4d
   - many useful formats and methods for vector/matrix operations
** remove width and height fields
   - use window.width and window.height instead
   - gnu.x11.test.Graphics
   - gnu.app.displayhack.DisplayHack
** faster padding calculation in gnu.x11.Data
   - instead of lookup data, use AND logic operation
** remove shallow classes
   - gnu.x11.OffsetData: integrate offset reading and writing into
     gnu.x11.Data to simplify operations
   - gnu.x11.Error: every X protocol-related error is now based on
     CoreError (just renamed to Error)

* 0.1.6
** gnu.extension.render
   - start porting X Rendering Extension by Keith Packard
   - gnu.x11.test.Blend, test blending in RENDER
   - gnu.app.displayhack.Sprites, moving sprites to blend colors
** gnu.x11.Offset
   - support offset writing; allow writing on
     gnu.x11.extension.Picture.Format, as in gnu.x11.test.Blend
** gnu.app.Sniff
   - a network middle-layer sniffer
   - use to debug protocol when developing this library
** gnu.x11.extension.Extension
   - #more_string(): provide abstraction for showing extension info;
     #show both client and server versions if available
   - always query/get version before any other operations (required
     for most extensions)
   - NotFoundException: throw exception in extension constructor;
     this is the expected behavior for most cases
** remove shallow classes
   - gnu.x11.Pad
   - gnu.x11.Reply
   - gnu.x11.XData
   - gnu.x11.XOffsetData
** new utility classes
   - gnu.app.Application
   - gnu.util.Classpath
   - gnu.util.Misc
   - gnu.util.ReloadableClassLoader
** remove big requests test in gnu.x11.test.Internal
   - as long as gnu.x11.test.Image and gnu.x11.test.ZPixmap work, big
     requests works (since both tests use gnu.x11.Drawable#put_image)
** gnu.app.Zion
   - Echidna-like multiprocess system in Java, to allow multiple JVM
     to run concurrently in the same JVM to compensate slow startup
     time and resource hog of separate JVM
** new gnu.x11.Error
   - catch connection, core, and extension errors
   - `check_error' needs this to catch all x errors and then clear
     sockets, as tested in gnu.x11.test.DBE
** thread and socket connection
   - both gnu.app.displayhack.DisplayHack and gnu.x11.test.Sync
   - in dispatch_event(), do not call System#exit(int) when BUTTON3; instead call
     DisplayHack#kill(); otherwise, another thread will attempt to
     write to a socket that is already closed
   - in run(), call properly gnu.x11.Application#close() such that
     the socket is closed when exiting; do it in run() instead of
     exec() because run() always outlasts (user control vs. graphics
     drawing)
** gnu.x11.Display: >=24 depth
   - throw "unsupported" exception when available depths < 24; need >=
     24 to draw in gnu.x11.test.{Image, ZPixmap}; also, select
     best_pixmap_format = 24 (the only image format we can handle now)
** gnu.x11.extension.EVI
   - fixed "bug" in EVI#version()
   - specification says request length = 2 while implementation
     (xfree86) accepts request length = 1 
** start gnu.x11.extension.glx
   - start porting OpenGL(tm) via GLX
   - get version gnu.x11.extension.glx.test.Hello
** XFree86 4.0.1, Solaris and Windows
   - use newest (debian unstable branch) XFree86 as development
     platform
   - gain access to a x server in solaris machine for testing
   - gain access to a winpro x server in windows for testing
** name changes
   - use inner class instead of external class for related classes
   - for conciseness and consistency
   - gnu.puppet --> gnu.app.puppet
   - gnu.tool --> gnu.app
   - gnu.x11.EnumItem --> gnu.x11.Enum
   - gnu.x11.GCValues --> gnu.x11.GC.Values
   - gnu.x11.KeyboardControl --> gnu.x11.Input.KeyboardControl
   - gnu.x11.TextItem --> gnu.x11.Text
   - gnu.x11.PixmapFormat --> gnu.x11.Pixmap.Format
   - gnu.x11.WindowAttributes --> gnu.x11.WindowAttributes
   - gnu.x11.WindowChanges --> gnu.x11.WindowChanges
   - gnu.x11.Window.WindowAttributesReply
      --> gnu.x11.Window.AttributesReply
   - gnu.x11.XApp --> gnu.x11.Application
   - gnu.x11.XError --> gnu.x11.CoreError
   - gnu.x11.displayhack.* --> gnu.app.displayhack.*
   - gnu.x11.displayhack.eraser.CircleWipe
     --> gnu.x11.displayhack.eraser.Circle
   - gnu.x11.displayhack.eraser.ThreeCircleWipe
     --> gnu.x11.displayhack.eraser.ThreeCircles
   - gnu.x11.event.KeyButtonEvent --> gnu.x11.event.State
   - gnu.x11.event.*Event --> gnu.x11.event.*
   - gnu.x11.extension.ExtensionErrorFactory
     --> gnu.x11.extension.ErrorFactory
   - gnu.x11.extension.ExtensionEventFactory
     --> gnu.x11.extension.EventFactory
   - gnu.x11.extension.ShapeNotifyEvent
     --> gnu.x11.extension.NotifyEvent
   - gnu.x11.request.AggregateRequest --> gnu.x11.Request.Aggregate
   - gnu.x11.request.PolyRequest --> gnu.x11.Request.Poly
   - gnu.x11.request.FillPolyRequest --> gnu.x11.Request.Poly.Fill
   - gnu.x11.request.PolyArcRequest --> gnu.x11.Request.Poly.Arc
   - gnu.x11.request.PolyDotRequest --> gnu.x11.Request.Poly.Dot
   - gnu.x11.request.PolyRectangleRequest --> gnu.x11.Request.Poly.Rectangle
   - gnu.x11.request.PolySegmentRequest --> gnu.x11.Request.Poly.Segment
   - gnu.x11.request.ValueListRequest --> gnu.x11.Request.ValueList
   - gnu.x11.test.HelloX --> gnu.x11.test.Hello2
   - gnu.x11.test.Poly --> gnu.x11.test.Polygon
   - gnu.x11.test.TestGraphics --> gnu.x11.test.Graphics
   - gnu.x11.test.TestThread --> gnu.x11.test.Sync
   - gnu.x11.test.Test* --> gnu.x11.test.*
** predefined font gnu.x11.Cursor
   - import cursor fonts in /usr/include/X11/cursorfont.h
** gnu.app.puppet.Puppet
   - fixed bug (BAD_WINDOW when `jump-to-register') in
     register_fall_back such that it handles class-hint correctly and
     falls back to some client different from the input parameter, and
     bug in client_to_register such that it initializes
     client.register correctly 
** keysym and keycode
   - import all keysyms from /usr/include/X11/*keysym*.h to
     gnu.x11.keysym.*
   - removed keysyms in gnu.x11.Input
   - print keysym table in gnu.x11.test.TestInfo
   - "correctly" assume Input.keysyms_per_keycode = 2
   - do not assume uppercase or lowercase keysyms returned from server
     (solaris vs. xfree86) in Input.keycode_to_keysym
** invalid options
   - output invalid names or invalid values of options, for better
     debugging 
** iterator instead of enumeration
   - style; utilize jdk 1.3 new collection classes
** minor opcode strings in gnu.x11.extension.*
   - output minor opcode descriptive strings when a core extension
     occurs 
** clear input stream in check_error of gnu.x11.Connection
   - input focus reply resides in network buffer while nobody wants
     it; clear socket input stream so that gnu.x11.test.TestShape
     works
** extension error factory
   - test double buffer extension "buffer error"


* 0.1.5
** gnu.x11.test.TestGraphics
   - abstraction for most gnu.x11.test.*; trade clarity for
     compactness; TestHello remains as verbose (do not use
     TestGraphics) for full illustration
** set socket timeout in gnu.x11.MessageFactory
   - prevent server bugs from locking our clients when reading a reply
     or an event (gnu.x11.extension.DBE#visual_info(Drawable[]))
** gnu.x11.extension.DBE#visual_info(Drawable[]) bug
   - horrible spaghetti codes in xlib forgets to divide reply length
     by four (a byte vs. a unit = four bytes); traced out by xmon, an
     interactive X protocol monitor, and vdb (eyeball debugger)
** gnu.x11.OffsetData: an offset data over another offset data
   - handle the case when input data is an instance of offset data;
     old offset shold be added to the new offset
** escher/ChangeLog: centrailized change log
   - avoid clustered little change logs over source code tree;
     detailed comments and explanations and reasons behind changes vs. 
     user visible changes in escher/CHANGES


* before 0.1.5
** remove gnu.x11.wm
   - integrate them into gnu.x11.Window as inner classes, consistent
     with extensive use of inner class as minor data structure
** gnu.util.Environment, gnu.util.Option, gnu.x11.Option
   - primitive command line parsing; use standard long option (without
     "=" in between) for clarity and easy parsing
   - use system-dependent way (unix-way) to read $DISPLAY from process
     environment; trade a little startup time for convenience
** Connection.java: 
   - multi-threading safe, avoid race-condition when reading reply
     during blocking reading event
   - aggregate only last request, the only possible cheap aggregation
     model 
   - fixed sequence number bug, no increment for aggregated requests
** MessageFactory.java: throws IOException
** Display.java, Screen.java: defaults
   - provides various convenient defaults
** various display hacks
   - to test functionality and speed of the library
** gnu.puppet.Puppet:
   - no-geometry-change option to fight licq
   - sync during grab in dispatch events
** ibm jdk 1.3 and jikes
   - some compiler bug in blackdown 1.1.8 (inner class)
   - utilize latest technologies (lightning speed of jikes)
** gnu.x11.extension.DPMS#capable() bug
   - horrible spaghetti codes in xlib forgets to swap sequence number
     in reply; traced out by vdb (eyeball debugger)
** remove gnu.x11.X base class
   - confusing X base class, instead use Display as member variable
     directly
